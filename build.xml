<project name="OASIS" default="run" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        This ant build file will download dependency jars, compile all FitNesse Fixtures and startup OASIS
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src/main/java"/>
  <property name="src.unit.test" location="src/test/java"/>
  <property name="build" location="build"/>
  <property name="lib" location="lib"/>
  <property name="dist"  location="dist"/>
  <property name="apps"  location="apps"/>
  <property file="oasis.properties"/> <!-- load properties from the oasis.properties file -->
  
  <path id="compile.classpath"> <!-- this classpath refid includes everything needed for compiling the source -->
    <pathelement path="${classpath}"/>
    <fileset dir="lib"><include name="**/*.jar"/></fileset>
    <fileset dir="plugins"><include name="**/*.jar"/></fileset>
  </path>
  
  <target name="bootstrap" description="Installs apache ivy">
    <mkdir dir="${user.home}/.ant/lib"/>
    <get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar"/>
  </target>
  
  <target name="unzip_apps" description="Unzips all application zip files (IE:firefoxes) inside the apps directory">
    <unzip dest="${apps}">
      <fileset dir="${apps}">
        <include name="*.zip"/>
      </fileset>
    </unzip>
  </target>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${lib}"/>
    <mkdir dir="${lib}/ivy"/>
	
	<antcall target="unzip_apps" />
	
	<!-- echo properties from the oasis.properties file -->
	<echo>
	oasis_version: ${oasis_version}
	fitnesse_port: ${fitnesse_port}
	</echo>
		
  </target>
  
  <!-- downloadable dependencies are listed in ivy.xml file and are downloaded to the lib/ivy directory. -->
  <target name="resolve" depends="init" description="--> retreive dependencies with ivy">
    <ivy:retrieve pattern="${lib}/ivy/[artifact]-[revision](-[classifier]).[ext]" conf="runtime,test"/>
	<ivy:report todir="${build}"/>
	<ivy:retrieve pattern="${lib}/jmeter/[artifact]-[revision](-[classifier]).[ext]" conf="jmeter"/>
    <ivy:report todir="${build}"/>
	<!--  need to use customized fitnesse jar to load custom OasisScriptTable
    <echo message="moving ivy/${fitnesse_jar} to ${basedir}" />
    <move todir="${basedir}" includeemptydirs="false">
      <fileset dir="${lib}/ivy">
        <include name="fitnesse-*.jar"/>
      </fileset>
      <mapper type="glob" from="*" to="${fitnesse_jar}"/>
    </move>
	-->
	
	<get dest="plugins/oasisplugin.jar" src="https://github.com/jguglielmi/OasisPlugin/releases/download/v1.0.4/OasisPlugin.jar" verbose="true" usetimestamp="true"/>
	<get dest="plugins/jmeterbundle.jar" src="https://github.com/Synthuse/JmeterBundle-src/releases/download/v1.4/jmeterbundle.jar" verbose="true" usetimestamp="true"/>
    <get dest="plugins/synthuse.jar" src="https://github.com/Synthuse/synthuse-src/releases/download/v1.2.2/synthuse.jar" verbose="true" usetimestamp="true"/>

  </target>

  <target name="compile" depends="init" description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" includeantruntime="false">
		<classpath refid="compile.classpath" />
	</javac>
  </target>
  
  <target name="unit_test" depends="compile" description="run the unit tests">
    <!-- Compile the java unit test code from ${src.unit.test} into ${build} -->
    <javac srcdir="${src.unit.test}" destdir="${build}" includeantruntime="false">
      <classpath>
	    <path refid="compile.classpath"/>
	    <pathelement location="${build}"/>
      </classpath>
	</javac>
	<!-- run junit test dump results into ${build}/unit_tests -->
    <mkdir dir="${build}/unit_tests" />
    <junit forkmode="once" fork="no" printsummary="yes" haltonfailure="no" haltonerror="no" dir="${basedir}">
      <classpath>
	    <path refid="compile.classpath"/>
	    <pathelement location="${build}"/>
      </classpath>
      <formatter type="xml" usefile="true" />
      <formatter type="plain" usefile="false" />
      <batchtest todir="${build}/unit_tests">
        <fileset dir="${src.unit.test}"><include name="**/*.java" /></fileset>
      </batchtest>
    </junit>

	<!-- generate report with junitreport -->
    <junitreport todir="${build}">
      <fileset dir="${build}/unit_tests" />
      <report todir="${build}/report" />
    </junitreport>

  	<!-- parse the report through a filter chain to extract what you want -->
    <loadfile property="reportSummary" srcfile="${build}/report/overview-summary.html">
      <filterchain>
        <linecontainsregexp>
          <regexp pattern='title="Display all tests"' />
        </linecontainsregexp>
        <replaceregex pattern='.*"all-tests.html".(\d*).*?"alltests-fails.html".(\d*).*?"alltests-errors.html".(\d*).*?"alltests-skipped.html".(\d*).*' replace="Tests: \1, Fails: \2, Errors: \3, Skips: \4" />
      </filterchain>
    </loadfile> 
	<echo>
	*** Unit Test Summary ***
	${reportSummary}
    </echo>

  </target>
  
  <!-- Create distribution files  -->
  <target name="dist" depends="unit_test" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
    <!-- Put everything in ${build} into the FitnesseFixtures-${DSTAMP}.jar file -->
    <!-- <jar jarfile="${dist}/FitnesseFixtures-${DSTAMP}.jar" basedir="${build}"/> -->
	<zip destfile="${dist}/oasis.zip">
      <zipfileset dir="." includes="**/*" prefix="oasis">
	    <exclude name="build/**"/>
	    <exclude name="dist/**"/>
	    <exclude name="lib/ivy/**"/>
	    <exclude name="lib/mvn/**"/>
		<exclude name="FitNesseRoot/files/testResults/**/*"/>
	  </zipfileset>
    </zip>
  </target>
  
  <!-- Start up Oasis/FitNesse instance 
       To spawn a new process add -Drun_spawn=true
   -->
  <target name="run" depends="unit_test" description="generate the distribution" >
    <java jar="${fitnesse_jar}" fork="true" spawn="${run_spawn}" failonerror="false" maxmemory="1g">
      <arg value="-p"/>
	  <arg value="${fitnesse_port}"/>
      <arg value="-o"/>
      <arg value="-e"/>
      <arg value="0"/>
      <arg value="-d"/>
      <arg value="."/>
      <classpath>
        <pathelement location="${fitnesse_jar}"/>
        <pathelement path="${java.class.path}"/>
	    <path refid="compile.classpath"/>
	    <pathelement location="${build}"/>		   
      </classpath>
    </java>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
	<!-- <delete dir="${lib}"/> -->
  </target>

  <target name="port_wait" description="wait for FitNesse port to be accessible" >
    <echo message="Waiting a maximum of 80 seconds for port ${fitnesse_port}"/>
    <waitfor maxwait="80" maxwaitunit="second">
      <socket server="localhost" port="${fitnesse_port}"/>
    </waitfor>
    <sleep seconds="1"/>
  </target>
  
  <!-- to execute a FitNesse test run this target and set fitnesse_test property like the following:
  ant fitnesse_test -Dfitnesse_test=OasisExamples.SimpleSeleniumTest1
  or
  ant fitnesse_test -Dfitnesse_test=OasisExamples.SimpleFitNesseTest1
  -->
  <target name="fitnesse_test" depends="port_wait" description="wait for FitNesse and execute test" >
    <echo message="Running FitNesse test ${fitnesse_test}"/>
    <loadresource property="results_name">
      <propertyresource name="fitnesse_test"/>
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replacestring from="/" to="_"/>
          <replacestring from="." to="_"/>
        </tokenfilter>
      </filterchain>
    </loadresource>

    <get dest="TestResult-${results_name}.xml" src="http://localhost:${fitnesse_port}/${fitnesse_test}?test&amp;format=xml&amp;includehtml"/>
	
	<echo message="converting TestResult-${results_name}.xml to build/TestResult-${results_name}.html"/>
    <xslt basedir="." destdir="build" style="src/test/xslt/fitnesse-xml2html.xslt">
      <mapper type="glob" from="TestResult-*.xml" to="TestResult-*.html"/>
    </xslt>
  </target>

  <target name="shutdown" description="shutdown fitnesse and browser" >
    <get dest="out.tmp" src="http://localhost:${fitnesse_port}/?sik&amp;shutdown" ignoreerrors="true"/>
    <exec executable="taskkill" osfamily="winnt">
      <arg value="/F"/>
      <arg value="/IM"/>
      <arg value="firefox.exe"/>
    </exec>
    <exec executable="bash" osfamily="unix">
      <arg value="-c"/>
      <arg line='"kill $(ps aux | grep firefox | grep -v grep | awk &apos;{print $2}&apos;)"'/>
    </exec>
  </target>

</project>
